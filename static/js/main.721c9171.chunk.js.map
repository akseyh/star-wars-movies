{"version":3,"sources":["img/star-wars-logo.png","components/Header.js","pages/Home.js","components/MovieItem.js","pages/Movies.js","components/PeopleItem.js","pages/Peoples.js","components/PlanetItem.js","pages/Planets.js","components/StarshipItem.js","pages/Starships.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","Navbar","bg","variant","react_router_dom","to","className","Image","src","logo","width","Collapse","id","Nav","Home","MovieItem","title","this","props","Card","text","style","margin","height","float","Body","Title","React","Component","Movies","state","movies","Promise","resolve","reject","fetch","then","reply","json","_this2","getMoviesList","setState","prevState","concat","Object","toConsumableArray","results","console","log","display","flexWrap","justifyContent","length","map","movie","index","components_MovieItem","key","Spinner","animation","PeopleItem","name","Peoples","peoples","page","i","getPeoplesList","people","components_PeopleItem","PlanetItem","Planets","planets","getPlanetsList","planet","components_PlanetItem","StarshipItem","Starships","starships","getStarshipsList","starship","components_StarshipItem","App","Container","Col","components_Header","react_router","component","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.721c9171.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-wars-logo.1b4306c0.png\";","import React from 'react';\r\nimport { Navbar, Nav, Image } from 'react-bootstrap';\r\nimport { Link} from 'react-router-dom';\r\nimport logo from '../img/star-wars-logo.png'\r\n\r\n\r\nfunction Header () {\r\n    return(\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Link to={'/star-wars-movies'} className=\"navbar-brand\"> \r\n                    <Image src={logo} width=\"100px\"/>\r\n                </ Link>\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\" id=\"navbarToggleExternalContent\">\r\n                        <Link to={'/star-wars-movies/movies'} className=\"nav-link\"> Movies </ Link>\r\n                        <Link to={'/star-wars-movies/peoples'} className=\"nav-link\"> Peoples </ Link>\r\n                        <Link to={'/star-wars-movies/planets'} className=\"nav-link\"> Planets </ Link>\r\n                        <Link to={'/star-wars-movies/starships'} className=\"nav-link\"> Starships </ Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Home () {\r\n    return(\r\n        <div>\r\n            HomePage\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nclass MovieItem extends React.Component {\r\n    render() {\r\n        const {title} = this.props;\r\n        return(\r\n            <Card  \r\n                bg=\"dark\"\r\n                text=\"white\" \r\n                style={{margin: \"5px\", width: \"10rem\", height: \"10rem\", float: \"left\"}}\r\n            >\r\n                <Card.Body>\r\n                <Card.Title>{title}</Card.Title>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieItem;","import React from 'react';\r\nimport MovieItem from '../components/MovieItem';\r\nimport {Spinner} from 'react-bootstrap';\r\n\r\nclass Movies extends React.Component {\r\n    state = {\r\n        movies: []\r\n    }\r\n\r\n    getMoviesList() {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(\"https://swapi.co/api/films/?format=json\")\r\n                .then(reply => resolve(reply.json()))\r\n        })\r\n    }\r\n    \r\n    componentWillMount() {\r\n        this.getMoviesList()\r\n            .then(reply => {\r\n                this.setState(prevState => ({ \r\n                    movies: [...prevState.movies, ...reply.results] \r\n                }));\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { movies } = this.state;\r\n        console.log(movies);\r\n        return (\r\n            <div style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\"}}>\r\n                {movies.length \r\n                ? movies.map((movie, index) => \r\n                    <MovieItem\r\n                        key={index} \r\n                        title={movie.title}\r\n                    /> ) \r\n                : <Spinner animation=\"grow\"/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Movies;","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nclass PeopleItem extends React.Component {\r\n    render() {\r\n        const {name} = this.props;\r\n        return(\r\n            <Card  \r\n                bg=\"dark\"\r\n                text=\"white\" \r\n                style={{margin: \"5px\", width: \"10rem\", height: \"10rem\", float: \"left\"}}\r\n            >\r\n                <Card.Body>\r\n                <Card.Title>{name}</Card.Title>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PeopleItem;","import React from 'react';\r\nimport PeopleItem from '../components/PeopleItem';\r\nimport {Spinner} from 'react-bootstrap';\r\n\r\nclass Peoples extends React.Component {\r\n    state = {\r\n        peoples: []\r\n    }\r\n\r\n    getPeoplesList(page) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(\"https://swapi.co/api/people/?page=\" + page)\r\n                .then(reply => resolve(reply.json()))\r\n        })\r\n    }\r\n    \r\n    componentWillMount() {\r\n        for(let i=1; i<10; i++){\r\n            this.getPeoplesList(i)\r\n            .then(reply => {\r\n                this.setState(prevState => ({ \r\n                    peoples: [...prevState.peoples, ...reply.results] \r\n                }));\r\n            })\r\n        } \r\n    }\r\n\r\n    render() {\r\n        const { peoples } = this.state;\r\n        console.log(peoples);\r\n        return (\r\n            <div style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\"}}>\r\n                {peoples.length \r\n                ? peoples.map((people, index) => \r\n                    <PeopleItem\r\n                        key={index} \r\n                        name={people.name}\r\n                    /> ) \r\n                : <Spinner animation=\"grow\"/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Peoples;","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nclass PlanetItem extends React.Component {\r\n    render() {\r\n        const {name} = this.props;\r\n        return(\r\n            <Card  \r\n                bg=\"dark\"\r\n                text=\"white\" \r\n                style={{margin: \"5px\", width: \"10rem\", height: \"10rem\", float: \"left\"}}\r\n            >\r\n                <Card.Body>\r\n                <Card.Title>{name}</Card.Title>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlanetItem;","import React from 'react';\r\nimport PlanetItem from '../components/PlanetItem'\r\nimport {Spinner} from 'react-bootstrap';\r\n\r\nclass Planets extends React.Component {\r\n    state = {\r\n        planets: []\r\n    }\r\n\r\n    getPlanetsList(page) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(\"https://swapi.co/api/planets/?page=\" + page)\r\n                .then(reply => resolve(reply.json()))\r\n        })\r\n    }\r\n    \r\n    componentWillMount() {\r\n        for(let i=1; i<8; i++){\r\n            this.getPlanetsList(i)\r\n            .then(reply => {\r\n                this.setState(prevState => ({ \r\n                    planets: [...prevState.planets, ...reply.results] \r\n                }));\r\n            })\r\n        } \r\n    }\r\n\r\n    render() {\r\n        const { planets } = this.state;\r\n        console.log(planets);\r\n        return (\r\n            <div style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\"}}>\r\n                {planets.length \r\n                ? planets.map((planet, index) => \r\n                    <PlanetItem\r\n                        key={index} \r\n                        name={planet.name}\r\n                    /> ) \r\n                : <Spinner animation=\"grow\"/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Planets;","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nclass StarshipItem extends React.Component {\r\n    render() {\r\n        const {name} = this.props;\r\n        return(\r\n            <Card  \r\n                bg=\"dark\"\r\n                text=\"white\" \r\n                style={{margin: \"5px\", width: \"10rem\", height: \"10rem\", float: \"left\"}}\r\n            >\r\n                <Card.Body>\r\n                <Card.Title>{name}</Card.Title>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StarshipItem;","import React from 'react';\r\nimport StarshipItem from '../components/StarshipItem'\r\nimport {Spinner} from 'react-bootstrap';\r\n\r\nclass Starships extends React.Component {\r\n    state = {\r\n        starships: []\r\n    }\r\n\r\n    getStarshipsList(page) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(\"https://swapi.co/api/starships/?page=\" + page)\r\n                .then(reply => resolve(reply.json()))\r\n        })\r\n    }\r\n    \r\n    componentWillMount() {\r\n        for(let i=1; i<5; i++){\r\n            this.getStarshipsList(i)\r\n            .then(reply => {\r\n                this.setState(prevState => ({\r\n                    starships: [...prevState.starships, ...reply.results]\r\n                }))\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { starships } = this.state;\r\n        console.log(starships);\r\n        return (\r\n            <div style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\"}}>\r\n                {starships.length \r\n                ? starships.map((starship, index) => \r\n                    <StarshipItem\r\n                        key={index} \r\n                        name={starship.name}\r\n                    /> ) \r\n                : <Spinner animation=\"grow\"/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Starships;","import React  from 'react';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport { Container, Col } from 'react-bootstrap';\r\n\r\nimport Header from './components/Header';\r\nimport Home from './pages/Home';\r\nimport Movies from './pages/Movies';\r\nimport Peoples from './pages/Peoples';\r\nimport Planets from './pages/Planets';\r\nimport Starships from './pages/Starships';\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return(\r\n            <Container>\r\n                <HashRouter>\r\n                    <Col>\r\n                        <Header />\r\n                    </Col>\r\n                    <Col>\r\n                        <Route component={Home} exact path={\"/star-wars-movies\"} />\r\n                        <Route component={Movies} path={\"/star-wars-movies/movies\"} />\r\n                        <Route component={Peoples} path={\"/star-wars-movies/peoples\"} />                          \r\n                        <Route component={Planets} path={\"/star-wars-movies/planets\"} />                          \r\n                        <Route component={Starships} path={\"/star-wars-movies/starships\"} />                          \r\n                    </Col>\r\n                </HashRouter>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}